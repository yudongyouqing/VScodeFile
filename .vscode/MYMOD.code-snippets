{
	// Place your VSCodeFile 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"Print to console": {
		"scope": "cpp",
		"prefix": "MYMOD",
		"body": [
			"template <ll MOD>",
			"struct ModInt",
			"{",
			"public:",
			"	ModInt() : v(0) {}",
			"	template <typename T>",
			"	ModInt(T x) { v = ((ll)x % MOD + MOD) % MOD; }",
			"",
			"	ll Val(void) const { return v; }",
			"	ModInt Pow(ll exp) const",
			"	{",
			"		// assert(exp>=0);",
			"		ModInt res = 1;",
			"		ModInt base = *this;",
			"		while (exp)",
			"		{",
			"			if (exp & 1)",
			"				res *= base;",
			"			base *= base;",
			"			exp >>= 1;",
			"		}",
			"		return res;",
			"	}",
			"	ModInt Inv(void) const",
			"	{",
			"		// assert(v);",
			"		return Pow(MOD - 2);",
			"	}",
			"	ModInt &operator++()",
			"	{",
			"		++v;",
			"		if (v == MOD)",
			"			v = 0;",
			"		return *this;",
			"	}",
			"	ModInt &operator--()",
			"	{",
			"		if (v == 0)",
			"			v = MOD;",
			"		--v;",
			"		return *this;",
			"	}",
			"	ModInt operator++(int)",
			"	{",
			"		ModInt oldVal = *this;",
			"		++*this;",
			"		return oldVal;",
			"	}",
			"	ModInt operator--(int)",
			"	{",
			"		ModInt oldVal = *this;",
			"		--*this;",
			"		return oldVal;",
			"	}",
			"	ModInt &operator+=(const ModInt &rhs)",
			"	{",
			"		v += rhs.v;",
			"		v %= MOD;",
			"		return *this;",
			"	}",
			"	ModInt &operator-=(const ModInt &rhs)",
			"	{",
			"		v -= rhs.v;",
			"		v = (v + MOD) % MOD;",
			"		return *this;",
			"	}",
			"	ModInt &operator*=(const ModInt &rhs)",
			"	{",
			"		v *= rhs.v;",
			"		v %= MOD;",
			"		return *this;",
			"	}",
			"	ModInt &operator/=(const ModInt &rhs) { return *this *= rhs.Inv(); }",
			"	ModInt operator+() const { return *this; }",
			"	ModInt operator-() const { return ModInt(0) - *this; }",
			"	friend ModInt operator+(const ModInt &lhs, const ModInt &rhs)",
			"	{",
			"		ModInt res = lhs;",
			"		res += rhs;",
			"		return res;",
			"	}",
			"	friend ModInt operator-(const ModInt &lhs, const ModInt &rhs)",
			"	{",
			"		ModInt res = lhs;",
			"		res -= rhs;",
			"		return res;",
			"	}",
			"	friend ModInt operator*(const ModInt &lhs, const ModInt &rhs)",
			"	{",
			"		ModInt res = lhs;",
			"		res *= rhs;",
			"		return res;",
			"	}",
			"	friend ModInt operator/(const ModInt &lhs, const ModInt &rhs)",
			"	{",
			"		ModInt res = lhs;",
			"		res /= rhs;",
			"		return res;",
			"	}",
			"	friend bool operator==(const ModInt &lhs, const ModInt &rhs) { return lhs.v == rhs.v; }",
			"	friend bool operator!=(const ModInt &lhs, const ModInt &rhs) { return lhs.v != rhs.v; }",
			"	friend istream &operator>>(istream &is, ModInt &aim)",
			"	{",
			"		ll tmp;",
			"		is >> tmp;",
			"		aim = ModInt(tmp);",
			"		return is;",
			"	}",
			"	friend ostream &operator<<(ostream &os, const ModInt &aim) { return os << aim.Val(); }",
			"",
			"protected:",
			"	ll v;",
			"}$0;",
			"using mint = ModInt<MOD>;"
		],
		"description": "Mod"
	}
}