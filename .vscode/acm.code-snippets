{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Print to console": {
		"prefix": "acm",
		"body": [
			"#include <bits/stdc++.h>",
			"using namespace std;",
			"using ll = long long;",
			"using db = double;",
			"using ull = unsigned long long;",
			"#define ff(x) fixed << setprecision(x)",
			"constexpr db EPS = 1.0e-9;",
			"constexpr ll MOD = 998244353LL;",
			"constexpr ll MOd = 1e9+7;",
			"constexpr ll SZ = 1e6;",
			"constexpr ll MAXN5 = 2e5 + 5;",
			"constexpr ll MAXN6 = 2e6 + 5;",
			"constexpr double pi = acos(-1.0);"
			"mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());"
			"ll n, m;",
			"",
			"void Solve(void){",
			"    ",
			"    ",
			"}",
			"int main(void)",
			"{", 
			"	ios::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);",
			"",
			"    int cas = 1;",
			"    // cin >> cas;",
			"    while (cas--)",
			"        Solve();",
			"    return 0;",
			"}",
		],
		"description": "touwenjian"
	}
}